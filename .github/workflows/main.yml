name: "Build, Test, Provision infra with TF, Deploy"

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOTNET_SDK: "6.0.x"

jobs:
  build:
    name: ".NET build & test"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ env.DOTNET_SDK }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_SDK }}

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: >
          dotnet test --configuration Release --no-restore
          --logger trx --results-directory "TestResults-${{ env.DOTNET_SDK }}"

      - name: Upload .NET test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results-${{ env.DOTNET_SDK}}
          path: TestResults-${{ env.DOTNET_SDK }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-build-${{ env.DOTNET_SDK}}
          path: MovingCompanyAPI/bin/

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  terraform:
    name: "Terraform"
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./MovingCompanyAPI-Infrastructure
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: ">1.1.0"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  deploy:
    name: "Deploy API"
    runs-on: ubuntu-20.04
    needs: [build, terraform]
    steps:
      - name: "Placeholder deploy"
        run: echo "this is a placeholder job"
