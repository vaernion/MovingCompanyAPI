name: "Build, Test, Provision infra with TF, Deploy"

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOTNET_SDK: "6.0.x"

jobs:
  build:
    name: ".NET build & test"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ env.DOTNET_SDK }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_SDK }}

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: >
          dotnet test --configuration Release --no-restore
          --logger trx --results-directory "TestResults-${{ env.DOTNET_SDK }}"

      - name: Upload .NET test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results-${{ env.DOTNET_SDK}}
          path: TestResults-${{ env.DOTNET_SDK }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-build-${{ env.DOTNET_SDK}}
          path: MovingCompanyAPI/bin/

  terraform:
    name: "Terraform"
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: ">1.1.0"

      - name: Terraform Format (staging)
        id: fmt_staging
        if: github.event_name == 'pull_request'
        run: terraform -chdir=environments/staging fmt -check

      - name: Terraform Format (prod)
        id: fmt_prod
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=environments/prod fmt -check

      - name: Terraform Init (staging)
        id: init_staging
        if: github.event_name == 'pull_request'
        run: terraform -chdir=environments/staging init

      - name: Terraform Init (prod)
        id: init_prod
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=environments/prod init

      - name: Terraform Validate (staging)
        id: validate_staging
        if: github.event_name == 'pull_request'
        run: terraform -chdir=environments/staging validate -no-color

      - name: Terraform Validate (prod)
        id: validate_prod
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=environments/staging validate -no-color

      - name: Terraform Plan (staging)
        id: plan_staging
        if: github.event_name == 'pull_request'
        run: terraform -chdir=environments/staging plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan_staging.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status (staging)
        if: steps.plan.outcome == 'failure'
        run: exit 1

        # Deploy staging on pull request
      - name: Terraform Apply (prod)
        if: github.event_name == 'pull_request'
        run: terraform -chdir=environments/staging apply -auto-approve -input=false

        # Ensure production mirrors main branch
      - name: Terraform Apply (prod)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=environments/prod apply -auto-approve -input=false

  sonarcloud:
    name: Sonarcloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"vaernion_MovingCompanyAPI" /o:"vaernion" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet restore
          dotnet build --configuration Release --no-restore
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    name: "Deploy API"
    runs-on: ubuntu-20.04
    needs: [build, terraform]
    steps:
      - name: "Placeholder deploy"
        run: echo "this is a placeholder job"
